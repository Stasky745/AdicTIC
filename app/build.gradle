apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

def keystorePropertiesFile = file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    signingConfigs {
        AdicTIC {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    compileSdkVersion 31
    def code = getCustomVersionCode()
    defaultConfig {
        applicationId "com.adictic.client"
        minSdkVersion 24
        targetSdkVersion 31
        versionCode code
        versionName "1.0."+code
        signingConfig signingConfigs.AdicTIC
    }
    buildTypes {
        debug {
            debuggable true
        }
        release {
            // https://github.com/android/ndk-samples/blob/8132651aba8db36b14e0d0461c7cb46d3778f99c/other-builds/ndkbuild/hello-neon/app/build.gradle
            // https://developer.android.com/ndk/guides/abis
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"//, "x86" // includes ARM SO files only, so no x86 SO file
            }
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        applicationVariants.all{
            variant ->
                variant.outputs.each{
                    output->
                        output.outputFileName = "adictic_${variant.versionName}.apk"
                }
        }
    }
    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }
    packagingOptions {
        exclude("META-INF/kotlinx-io.kotlin_module")
        exclude("META-INF/atomicfu.kotlin_module")
        exclude("META-INF/kotlinx-coroutines-io.kotlin_module")
        exclude("META-INF/kotlinx-coroutines-core.kotlin_module")
    }
//    flavorDimensions "abi"
//    productFlavors {
//        arm7 {
//            dimension "abi"
//            ndk.abiFilters 'armeabi-v7a'
//        }
//        x86 {
//            dimension "abi"
//            ndk.abiFilters 'x86'
//        }
//    }
}

def getCustomVersionCode() {
    def versionPropsFile = file('version.properties')
    def code
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        List<String> runTasks = gradle.startParameter.getTaskNames()
        def value = 0
        for (String item : runTasks)
            if (item.contains("assembleRelease")) {
                value = 1
            }
        if (value == 1) {
            code = Integer.parseInt(versionProps['VERSION_CODE']).intValue() + value
            versionProps['VERSION_CODE'] = code.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        } else
            code = Integer.parseInt(versionProps['VERSION_CODE']).intValue()
        return code
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }
}

configurations {
    download
}

//Dependencies only used by app
dependencies {

    //Otros
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.5'
    implementation 'com.github.judemanutd:autostarter:1.1.0'

    //Modules
    implementation project(path: ':libraries:jitsiVideocall')
    implementation project(path: ':libraries:persistentcookie')
    implementation project(path: ':libraries:common')
}

task downloadDrivers(type: Copy) {
    from configurations.download
    into "$buildDir/down-libs"
}