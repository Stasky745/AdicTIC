plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
}

def keystorePropertiesFile = file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    signingConfigs {
        AdicTIC {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    compileSdkVersion 30

    def code = getCustomVersionCode()
    defaultConfig {
        applicationId "com.example.adictic_admin"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode code
        versionName "1.0."+code
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.AdicTIC
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        applicationVariants.all{
            variant ->
                variant.outputs.each{
                    output->
                        output.outputFileName = "adictic-admin_${variant.versionName}.apk"
                }
        }
    }
    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }
    packagingOptions {
        exclude("META-INF/kotlinx-io.kotlin_module")
        exclude("META-INF/atomicfu.kotlin_module")
        exclude("META-INF/kotlinx-coroutines-io.kotlin_module")
        exclude("META-INF/kotlinx-coroutines-core.kotlin_module")
    }
}

def getCustomVersionCode() {
    def versionPropsFile = file('version.properties')
    def code
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        List<String> runTasks = gradle.startParameter.getTaskNames();
        def value = 0
        for (String item : runTasks)
            if (item.contains("assembleRelease")) {
                value = 1;
            }
        if (value == 1) {
            code = Integer.parseInt(versionProps['VERSION_CODE']).intValue() + value
            versionProps['VERSION_CODE'] = code.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        } else
            code = Integer.parseInt(versionProps['VERSION_CODE']).intValue()
        return code
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.navigation:navigation-fragment:2.3.5'
    implementation 'androidx.navigation:navigation-ui:2.3.5'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.preference:preference:1.1.1'
    implementation files('libs/joda-time-2.10.10.jar')
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    implementation project(path: ':libraries:webRTC')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation platform('com.google.firebase:firebase-bom:28.1.0')
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-firestore'

    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.7.2'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:3.11.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.7.2'

    implementation "androidx.work:work-runtime:2.5.0"

    implementation "androidx.security:security-crypto:1.1.0-alpha03"

    implementation(name:'monthandyearpicker-1.3.0', ext:'aar')

    def osmdroid_version = "6.1.8"
    implementation "org.osmdroid:osmdroid-android:$osmdroid_version"
    implementation "org.osmdroid:osmdroid-wms:$osmdroid_version"
    implementation "org.osmdroid:osmdroid-mapsforge:$osmdroid_version"
//    implementation "org.osmdroid:osmdroid-geopackage:$osmdroid_version"

    // Glide
    def versions_glide = "4.12.0"
    implementation "com.github.bumptech.glide:glide:$versions_glide"
    annotationProcessor "com.github.bumptech.glide:compiler:$versions_glide"
    // Glide's OkHttp3 integration.
    implementation "com.github.bumptech.glide:okhttp3-integration:$versions_glide"
}